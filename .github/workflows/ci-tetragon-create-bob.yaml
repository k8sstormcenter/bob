name: Create Tetragon Bill of Behaviour on different Kernels, Kubernetes Versions, Kubernetes Distros and OSs


on:
  push:
    branches:
      - main
      - 66-migration-using-the-new-generalization-script-generate-redis-and-tetragons-bob-files-anew
    paths:    
      - '.github/workflows/ci-tetragon-create-bob.yaml'
      - 'Makefile'

    

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04 ,ubuntu-24.04]
        k8s-distribution: [k3s, kind, minikube] #fix k0s => it is simply not reporting any anomalies IG is never loaded
        kubernetes-version: [ v1.33.2]  #v1.30.0, v1.31.0, v1.32.0, v1.33.0, v1.33.2] 
    runs-on: ${{ matrix.os }}


    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Kind Cluster
        if: matrix.k8s-distribution == 'kind'
        uses: helm/kind-action@v1
        with:
          node_image: kindest/node:${{ matrix.kubernetes-version }}

      - name: Set up k3s Cluster
        if: matrix.k8s-distribution == 'k3s'
        uses: jupyterhub/action-k3s-helm@v4
        with:
          k3s-version: ${{ matrix.kubernetes-version }}+k3s1

      - name: Set up Minikube Cluster
        if: matrix.k8s-distribution == 'minikube'
        uses: medyagh/setup-minikube@master
        with:
          kubernetes-version: ${{ matrix.kubernetes-version }}
      - name: Set up Minikube Cluster
        if: matrix.k8s-distribution == 'minikube'
        run: make storage

      - name: Set up K0s Cluster
        if: matrix.k8s-distribution == 'k0s'
        run: |
          # Use K0S_VERSION to install the version from the matrix
          curl --proto '=https' --tlsv1.2 -sSf https://get.k0s.sh | sudo K0S_VERSION=${{ matrix.kubernetes-version }}+k0s.0 sh
          sudo k0s install controller --single
          sudo k0s start

          # Wait for the k0s status socket to be available to prevent race conditions
          echo "Waiting for k0s to become ready..."
          timeout=180
          while ! sudo k0s status &> /dev/null; do
            sleep 5
            timeout=$((timeout-5))
            if [ $timeout -le 0 ]; then
              echo "Timed out waiting for k0s to start"
              sudo k0s status # print last error for debugging
              exit 1
            fi
          done
          mkdir -p $HOME/.kube
          sudo k0s kubeconfig admin > $HOME/.kube/config
          make storage


      - name: Prepare MicroK8s channel
        if: matrix.k8s-distribution == 'microk8s'
        run: |
          K8S_MAJOR_MINOR=$(echo "${{ matrix.kubernetes-version }}" | cut -d. -f1,2 | sed 's/v//')
          echo "MICROK8S_CHANNEL=${K8S_MAJOR_MINOR}/stable" >> $GITHUB_ENV

      - name: Set up MicroK8s Cluster
        if: matrix.k8s-distribution == 'microk8s'
        uses: balchua/microk8s-actions@v0.3.2
        with:
          channel: ${{ env.MICROK8S_CHANNEL }}
          addons: '["dns", "hostpath-storage"]'

      - name: Verify function of k8s, kubectl, and helm
        run: |
          echo "kubeconfig: $KUBECONFIG"
          kubectl version
          kubectl get pods --all-namespaces
          uname -a

          helm version
          helm list

      - name: Install kubescape
        run: |
          make storage kubescape-vendor
          kubectl get all -A
          kubectl logs -n honey -l app=kubescape
          kubectl logs -n honey -l app=node-agent 
          kubectl logs -n honey -l app=storage
          kubectl logs -n honey -l app=kubevuln
          kubectl logs -n honey -l app=operator




      - name: Run helm install for application
        run: |
          git clone https://github.com/k8sstormcenter/honeycluster.git
          make tetragon


      - name: Get logs
        run: |
          kubectl get all -A
          kubectl logs -n honey -l app=kubescape
          kubectl logs -n honey -l app=node-agent 
          kubectl logs -n honey -l app=storage
          kubectl logs -n honey -l app=kubevuln
          kubectl logs -n honey -l app=operator
          sleep 15


      - name: Run helm test
        continue-on-error: true
        run: |
          cd honeycluster 
          make traces
          make --makefile=Makefile_calibrate_kubehound calibration-traces calibration-attack 
          cd ..
          kubectl logs -n honey -l app=kubescape
          kubectl logs -n honey -l app=operator
          kubectl get ds -n bob -o jsonpath='{.items[0].status.currentRevision}'|cut -f4 -d '-'
          sleep 25
          kubectl logs -n honey -l app=node-agent 
          kubectl logs -l app=node-agent -n honey 

      - name: Export  ApplicationProfile
        id: export_bob
        run: |
          echo "Waiting for ApplicationProfile to be generated..."
          sleep 180
          mkdir -p bob-artifact
          kubectl get applicationprofile -A 
          echo "✅ ApplicationProfile exported to bob-artifact/bob-tetragon.yaml"
          for item in $(kubectl get applicationprofile -n bob -o jsonpath='{.items[*].metadata.name}'); do
            kubectl get applicationprofile -n bob "$item" -o yaml
            kubectl get applicationprofile -n bob "$item" -o yaml > "bob-artifact/bob-${item}-${{ matrix.os }}-${{ matrix.k8s-distribution }}-${{ matrix.kubernetes-version }}.yaml"
            echo "✅ ApplicationProfile exported to bob-artifact/bob-${item}-${{ matrix.os }}-${{ matrix.k8s-distribution }}-${{ matrix.kubernetes-version }}.yaml"
            pwd 
            mkdir -p bob-artifact
            ls -lah bob-artifact/*
          done


      - name: Upload BoB artifact
        uses: actions/upload-artifact@v4
        with:
          name: bob-profile-${{ matrix.os }}-${{ matrix.k8s-distribution }}-${{ matrix.kubernetes-version }}
          path: bob-artifact/bob-*.yaml

  package-bobs:
    runs-on: ubuntu-latest
    needs: build
    if: always() 
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all BoB artifacts
        uses: actions/download-artifact@v4
        with:
          path: bob-artifacts
          merge-multiple: true

      - name: Group profiles by type and build supersets
        run: |
          ls -lahR bob-artifacts
          ./testdata/superset.sh bob-artifacts


      - name: Package all BoBs into a tarball
        run: |
          echo "Packaging the following BoB files:"
          tar -czvf bobs.tar.gz -C bob-artifacts .

      - name: Upload BoB tarball
        uses: actions/upload-artifact@v4
        with:
          name: bobs-collection
          path: bobs.tar.gz

      # - name: setup kind
      #   uses: helm/kind-action@v1
      #   with:
      #     node_image: kindest/node:v1.33.0

      # - name: Test superset Bob on kind    
      #   run: |
      #     echo "kubeconfig: $KUBECONFIG"
      #     kubectl version
      #     kubectl get pods --all-namespaces
      #     uname -a
      #     helm version
      #     helm list
      #     make kubescape
      #     kubectl get all -A
      #     kubectl logs -n honey -l app=kubescape
      #     kubectl logs -n honey -l app=node-agent 
      #     kubectl logs -n honey -l app=storage
      #     kubectl logs -n honey -l app=kubevuln
      #     kubectl logs -n honey -l app=operator
      #     cp all-bobs/superset-bob.yaml ./example/myredis-umbrella-chart/redis-bob/templates/bob.yaml
      #     helm dependency update example/myredis-umbrella-chart/redis-bob/
      #     helm upgrade --install bob -n bob --create-namespace ./example/myredis-umbrella-chart/redis-bob --values ./example/myredis-umbrella-chart/redis-bob/values.yaml --set bob.create=true
      #     kubectl logs -n bob pods/bob-redis-master-0 redis 
      #     kubectl logs -n honey -l app=node-agent 
      #     sleep 30

      # - name: Run helm test
      #   continue-on-error: true
      #   run: |
      #     make helm-redis-test
      #     echo "Checking for unexpected anomalies in Kubescape logs...there should be 2"
      #     kubectl logs -n honey -l app=kubescape
      #     kubectl logs -n honey -l app=operator
      #     kubectl get statefulset -n bob -o jsonpath='{.items[0].status.currentRevision}'|cut -f4 -d '-'
      #     sleep 25
      #     kubectl logs -n honey -l app=node-agent 
      #     count=$(kubectl logs -l app=node-agent -n honey | grep -c "Unexpected")
      #     if ! kubectl logs -l app=node-agent -n honey | grep -q "Unexpected"; then
      #       kubectl logs -n honey -l app=kubescape
      #       kubectl logs -n honey -l app=node-agent
      #       kubectl logs -n honey -l app=storage
      #       kubectl logs -n honey -l app=kubevuln
      #       kubectl logs -n honey -l app=operator
      #       kubectl logs -n webapp webapp
      #       echo "Didnt find anything."
      #     else
      #     echo "Found $count anomalies"
      #     if [ "$count" -ne 2 ]; then
      #       echo "❌ Expected 2 anomalies, but found $count"
      #     fi


      - name: Upload superset BoB as the new final (and tested) Bill of Behavior 
        uses: actions/upload-artifact@v4
        with:
          name: bob-final
          path: bob-artifacts/**/*_bob.yaml


        

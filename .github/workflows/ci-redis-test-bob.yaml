name: Test Redis Superset Bill of Behaviour on different Kernels, Kubernetes Versions, Kubernetes Distros and OSs


on:
  push:
    branches:
      - main
      - 44-bobctl-can-take-applicationprofile-and-parametrize-it-into-a-helm-syntax
    paths:    
      - 'myredis-umbrella-chart/**'
      - 'kubescape/**'
      - '.github/workflows/ci-redis-test-bob.yaml'

    

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04 ,ubuntu-24.04]
        k8s-distribution: [k3s, kind, minikube] #fix k0s => it is simply not reporting any anomalies IG is never loaded
        kubernetes-version:  [ v1.30.0, v1.31.0, v1.32.0, v1.33.0, v1.33.2]  
    runs-on: ${{ matrix.os }}


    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Kind Cluster
        if: matrix.k8s-distribution == 'kind'
        uses: helm/kind-action@v1
        with:
          node_image: kindest/node:${{ matrix.kubernetes-version }}

      - name: Set up k3s Cluster
        if: matrix.k8s-distribution == 'k3s'
        uses: jupyterhub/action-k3s-helm@v4
        with:
          k3s-version: ${{ matrix.kubernetes-version }}+k3s1

      - name: Set up Minikube Cluster
        if: matrix.k8s-distribution == 'minikube'
        uses: medyagh/setup-minikube@master
        with:
          kubernetes-version: ${{ matrix.kubernetes-version }}
      - name: Set up Minikube Cluster
        if: matrix.k8s-distribution == 'minikube'
        run: make storage

      - name: Set up K0s Cluster
        if: matrix.k8s-distribution == 'k0s'
        run: |
          # Use K0S_VERSION to install the version from the matrix
          curl --proto '=https' --tlsv1.2 -sSf https://get.k0s.sh | sudo K0S_VERSION=${{ matrix.kubernetes-version }}+k0s.0 sh
          sudo k0s install controller --single
          sudo k0s start

          # Wait for the k0s status socket to be available to prevent race conditions
          echo "Waiting for k0s to become ready..."
          timeout=180
          while ! sudo k0s status &> /dev/null; do
            sleep 5
            timeout=$((timeout-5))
            if [ $timeout -le 0 ]; then
              echo "Timed out waiting for k0s to start"
              sudo k0s status # print last error for debugging
              exit 1
            fi
          done
          mkdir -p $HOME/.kube
          sudo k0s kubeconfig admin > $HOME/.kube/config
          make storage


      - name: Prepare MicroK8s channel
        if: matrix.k8s-distribution == 'microk8s'
        run: |
          K8S_MAJOR_MINOR=$(echo "${{ matrix.kubernetes-version }}" | cut -d. -f1,2 | sed 's/v//')
          echo "MICROK8S_CHANNEL=${K8S_MAJOR_MINOR}/stable" >> $GITHUB_ENV

      - name: Set up MicroK8s Cluster
        if: matrix.k8s-distribution == 'microk8s'
        uses: balchua/microk8s-actions@v0.3.2
        with:
          channel: ${{ env.MICROK8S_CHANNEL }}
          addons: '["dns", "hostpath-storage"]'

      - name: Verify function of k8s, kubectl, and helm
        run: |
          echo "kubeconfig: $KUBECONFIG"
          kubectl version
          kubectl get pods --all-namespaces
          uname -a

          helm version
          helm list

      - name: Install kubescape
        run: |
          make kubescape-vendor
          kubectl get all -A
          kubectl logs -n honey -l app=kubescape
          kubectl logs -n honey -l app=node-agent 
          kubectl logs -n honey -l app=storage
          kubectl logs -n honey -l app=kubevuln
          kubectl logs -n honey -l app=operator


      - name: Run helm install for redis
        run: |
          helm dependency update myredis-umbrella-chart/redis-bob/
          mv ./myredis-umbrella-chart/redis-bob/templates/tests/test-attack.yaml test-attack.yaml
          helm upgrade --install bob -n bob --create-namespace ./myredis-umbrella-chart/redis-bob --values ./myredis-umbrella-chart/redis-bob/values.yaml --set bob.create=true
          kubectl wait --for=condition=ready pod -n bob -l app.kubernetes.io/instance=bob

      - name: Get logs
        run: |
          kubectl logs -n bob pods/bob-redis-master-0 redis 
          kubectl logs -n honey -l app=node-agent 
          sleep 15


      - name: Run helm test
        continue-on-error: true
        run: |
          make helm-redis-test
          echo "Checking for unexpected anomalies in Kubescape logs...there should be NONE"
          kubectl logs -n honey -l app=kubescape
          kubectl logs -n honey -l app=operator
          kubectl get statefulset -n bob -o jsonpath='{.items[0].status.currentRevision}'|cut -f4 -d '-'
          sleep 25
          kubectl logs -n honey -l app=node-agent 
          count=$(kubectl logs -l app=node-agent -n honey | grep -c "Unexpected")
          if ! kubectl logs -l app=node-agent -n honey | grep -q "Unexpected"; then
            kubectl logs -n honey -l app=kubescape
            kubectl logs -n honey -l app=node-agent
            kubectl logs -n honey -l app=storage
            kubectl logs -n honey -l app=kubevuln
            kubectl logs -n honey -l app=operator
            kubectl logs -n webapp webapp
            echo "‚úÖ Didnt find anything."
            echo ::set-output name=status::success
          else
          echo "Found $count anomalies"
          if [ "$count" -ne 0 ]; then
            echo "‚ùå Expected 0 anomalies, but found $count"
            echo ::set-output name=status::failure
          fi



      - name: Reinstall redis with the attack test included
        run: |
          helm dependency update myredis-umbrella-chart/redis-bob/
          mv test-attack.yaml ./myredis-umbrella-chart/redis-bob/templates/tests/test-attack.yaml
          helm upgrade --install bob -n bob --create-namespace ./myredis-umbrella-chart/redis-bob --values ./myredis-umbrella-chart/redis-bob/values.yaml --set bob.create=true
          kubectl wait --for=condition=ready pod -n bob -l app.kubernetes.io/instance=bob



      - name: Run helm Attack Test 
        continue-on-error: true
        run: |
          make helm-redis-test
          echo "Checking for unexpected anomalies in Kubescape logs...there should be 4"
          kubectl logs -n honey -l app=kubescape
          kubectl logs -n honey -l app=operator
          kubectl get statefulset -n bob -o jsonpath='{.items[0].status.currentRevision}'|cut -f4 -d '-'
          sleep 60
          kubectl logs -n honey -l app=node-agent 
          kubectl logs -l app=node-agent -n honey | grep  "Unexpected" && echo "found" || echo "no anomaly"
          count=$(kubectl logs -l app=node-agent -n honey | grep -c "Unexpected")
          if ! kubectl logs -l app=node-agent -n honey | grep -q "Unexpected"; then
            echo "ü§î Didnt find anything, nodeagent is struggeling, here are some logs"
            kubectl logs -n honey -l app=kubescape
            kubectl logs -n honey -l app=node-agent
            kubectl logs -n honey -l app=storage
            kubectl logs -n honey -l app=kubevuln
            kubectl logs -n honey -l app=operator
            kubectl logs -n webapp webapp
          else
          echo "Found $count anomalies"
          if [ "$count" -ne 5 ]; then
            echo "‚ùå Expected 5 anomalies, but found $count"
            echo ::set-output name=status::failure
          fi
          kubectl logs -l app=node-agent -n honey | grep  "Unexpected" > /tmp/anomalyobserved.json
          jq -r '.BaseRuntimeMetadata.alertName' /tmp/anomalyobserved.json | sort > /tmp/actual_alerts.txt
          jq -r '.BaseRuntimeMetadata.alertName' ./testdata/redis_attack_raw.json | sort > /tmp/expected_alerts.txt
          if ! diff -u /tmp/expected_alerts.txt /tmp/actual_alerts.txt; then
            echo "‚ùå Alert names do not match expected!"
          else
            echo "‚úÖ Alert names match expected."
            echo ::set-output name=status::success
          fi


        

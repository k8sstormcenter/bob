name: Test Redis Superset Bill of Behaviour on different Kernels, Kubernetes Versions, Kubernetes Distros and OSs


on:
  push:
    branches:
      - main
      - 60-fix-the-pipelines-after-folder-restructure
    paths:    
      - 'example/myredis-umbrella-chart/**'
      - 'kubescape/**'
      - '.github/workflows/ci-redis-test-bob.yaml'

    

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04 ,ubuntu-24.04]
        k8s-distribution: [k3s, kind, minikube] #fix k0s => it is simply not reporting any anomalies IG is never loaded
        kubernetes-version:  [ v1.30.0, v1.31.0, v1.32.0, v1.33.0, v1.33.2]  
    runs-on: ${{ matrix.os }}


    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Kind Cluster
        if: matrix.k8s-distribution == 'kind'
        uses: helm/kind-action@v1
        with:
          node_image: kindest/node:${{ matrix.kubernetes-version }}

      - name: Set up k3s Cluster
        if: matrix.k8s-distribution == 'k3s'
        uses: jupyterhub/action-k3s-helm@v4
        with:
          k3s-version: ${{ matrix.kubernetes-version }}+k3s1

      - name: Set up Minikube Cluster
        if: matrix.k8s-distribution == 'minikube'
        uses: medyagh/setup-minikube@master
        with:
          kubernetes-version: ${{ matrix.kubernetes-version }}
      - name: Set up Minikube Cluster
        if: matrix.k8s-distribution == 'minikube'
        run: make storage

      - name: Set up K0s Cluster
        if: matrix.k8s-distribution == 'k0s'
        run: |
          # Use K0S_VERSION to install the version from the matrix
          curl --proto '=https' --tlsv1.2 -sSf https://get.k0s.sh | sudo K0S_VERSION=${{ matrix.kubernetes-version }}+k0s.0 sh
          sudo k0s install controller --single
          sudo k0s start

          # Wait for the k0s status socket to be available to prevent race conditions
          echo "Waiting for k0s to become ready..."
          timeout=180
          while ! sudo k0s status &> /dev/null; do
            sleep 5
            timeout=$((timeout-5))
            if [ $timeout -le 0 ]; then
              echo "Timed out waiting for k0s to start"
              sudo k0s status # print last error for debugging
              exit 1
            fi
          done
          mkdir -p $HOME/.kube
          sudo k0s kubeconfig admin > $HOME/.kube/config
          make storage


      - name: Prepare MicroK8s channel
        if: matrix.k8s-distribution == 'microk8s'
        run: |
          K8S_MAJOR_MINOR=$(echo "${{ matrix.kubernetes-version }}" | cut -d. -f1,2 | sed 's/v//')
          echo "MICROK8S_CHANNEL=${K8S_MAJOR_MINOR}/stable" >> $GITHUB_ENV

      - name: Set up MicroK8s Cluster
        if: matrix.k8s-distribution == 'microk8s'
        uses: balchua/microk8s-actions@v0.3.2
        with:
          channel: ${{ env.MICROK8S_CHANNEL }}
          addons: '["dns", "hostpath-storage"]'


      - name: Install Redis with the attack test included
        run: |
          echo "kubeconfig: $KUBECONFIG"
          kubectl version
          kubectl get pods --all-namespaces
          uname -a
          helm version
          helm list
          make kubescape
          kubectl get all -A
          kubectl logs -n honey -l app=kubescape
          kubectl logs -n honey -l app=node-agent 
          kubectl logs -n honey -l app=storage
          kubectl logs -n honey -l app=kubevuln
          kubectl logs -n honey -l app=operator
          helm dependency update example/myredis-umbrella-chart/redis-bob/
          helm upgrade --install bob -n bob --create-namespace ./example/myredis-umbrella-chart/redis-bob --values ./example/myredis-umbrella-chart/redis-bob/values.yaml --set bob.create=true
          kubectl logs -n bob pods/bob-redis-master-0 redis 
          kubectl logs -n honey -l app=node-agent 
          sleep 30



      - name: Run helm Attack Test 
        continue-on-error: true
        run: |
          make helm-redis-test
          echo "Checking for unexpected anomalies in Kubescape logs...there should be 2"
          sleep 60
          kubectl logs -n honey -l app=node-agent 
          count=$(kubectl logs -l app=node-agent -n honey | grep -c "Unexpected")
          echo "there were $count anomalies"
          kubectl logs -n honey -l app=kubescape
          kubectl logs -n honey -l app=node-agent
          kubectl logs -n honey -l app=storage
          kubectl logs -n honey -l app=kubevuln
          kubectl logs -n honey -l app=operator
          kubectl logs -n bob pods/bob-redis-master-0 redis 
          syscalls=$(kubectl logs -l app=node-agent -n honey| grep "Unexpected"| jq )


      - name: Compare alertName and first argument with expected anomalies
        id: compare_anomalies
        run: |
          kubectl logs -l app=node-agent -n honey | grep  "Unexpected" > /tmp/anomalyobserved.json
          extract() {
            jq -r '
              [
                .BaseRuntimeMetadata.alertName,
                (
                  .BaseRuntimeMetadata.arguments.flags[0] // 
                  .BaseRuntimeMetadata.arguments.args[0] // 
                  .BaseRuntimeMetadata.arguments.addresses[0] // 
                  .BaseRuntimeMetadata.arguments.syscall // 
                  ""
                )
              ] | @tsv
            ' "$1" | sort
          }


          extract /tmp/anomalyobserved.json > /tmp/actual_alerts.tsv
          extract ./testdata/anomaly-redis.json > /tmp/expected_alerts.tsv
          echo "Actual:"
          cat /tmp/actual_alerts.tsv
          echo "Expected:"
          cat /tmp/expected_alerts.tsv

          unexpected_alerts=$(comm -23 /tmp/actual_alerts.tsv /tmp/expected_alerts.tsv)
          if [ -n "$unexpected_alerts" ]; then
            echo "::set-output name=status::failure"
            echo "❌ Found alerts that were not in the expected list:"
            echo "$unexpected_alerts"
          else
            echo "::set-output name=status::success"
            echo "✅ All observed alerts were found in the expected list."
          fi

      - name: Prepare result artifact
        if: always()
        run: |
          KERNEL_VERSION=$(uname -r)
          SYSCALLS=$(jq -r 'select(.BaseRuntimeMetadata.alertName == "Unexpected system call") | .BaseRuntimeMetadata.arguments.syscall' /tmp/anomalyobserved.json | sort -u | tr '\n' ',' | sed 's/,$//' | sed 's/,/, /g')
          if [ -z "$SYSCALLS" ]; then
            SYSCALLS="N/A"
          fi
          PROCESSES=$(jq -r 'select(.BaseRuntimeMetadata.alertName == "Unexpected process launched") | .BaseRuntimeMetadata.arguments.args[]' /tmp/anomalyobserved.json | sort -u | tr '\n' ',' | sed 's/,$//' | sed 's/,/, /g')
          if [ -z "$PROCESSES" ]; then
            PROCESSES="N/A"
          fi
          FILE_ACCESS=$(jq -r 'select(.BaseRuntimeMetadata.alertName == "Unexpected file access") | .BaseRuntimeMetadata.arguments.flags[]' /tmp/anomalyobserved.json | sort -u | tr '\n' ',' | sed 's/,/, /g')
          if [ -z "$FILE_ACCESS" ]; then
            FILE_ACCESS="N/A"
          fi
          mkdir -p results
          cat << EOF > results/summary.json
          {
            "os": "${{ matrix.os }}",
            "k8s_distribution": "${{ matrix.k8s-distribution }}",
            "kubernetes_version": "${{ matrix.kubernetes-version }}",
            "kernel_version": "$KERNEL_VERSION",
            "status": "${{ steps.compare_anomalies.outputs.status || 'Skipped' }}",
            "syscalls": "$SYSCALLS",
            "processes": "$PROCESSES",
            "file_access": "$FILE_ACCESS"
          }
          EOF

      - name: Upload result artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: result-${{ matrix.os }}-${{ matrix.k8s-distribution }}-${{ matrix.kubernetes-version }}
          path: results/summary.json


  summarize:
    runs-on: ubuntu-latest
    needs: build
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate summary table
        run: |
          echo '### Matrix Build Summary' >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY
          echo '| OS | K8s Distro | K8s Version | Kernel Version | Status | Observed Syscalls | Observed Processes | Observed File Access |' >> $GITHUB_STEP_SUMMARY
          echo '|----|------------|---------------|----------------|--------|-------------------|--------------------|----------------------|' >> $GITHUB_STEP_SUMMARY
          
          for dir in artifacts/result-*; do
            if [ -f "$dir/summary.json" ]; then
              OS=$(jq -r '.os' "$dir/summary.json")
              K8S_DISTRO=$(jq -r '.k8s_distribution' "$dir/summary.json")
              K8S_VERSION=$(jq -r '.kubernetes_version' "$dir/summary.json")
              KERNEL=$(jq -r '.kernel_version' "$dir/summary.json")
              STATUS_RAW=$(jq -r '.status' "$dir/summary.json")
              SYSCALLS=$(jq -r '.syscalls' "$dir/summary.json")
              PROCESSES=$(jq -r '.processes' "$dir/summary.json")
              FILE_ACCESS=$(jq -r '.file_access' "$dir/summary.json")
              if [ "$STATUS_RAW" == "success" ]; then STATUS="✅ Success"; else STATUS="❌ ${STATUS_RAW}"; fi
              echo "| $OS | $K8S_DISTRO | $K8S_VERSION | $KERNEL | $STATUS | \`$SYSCALLS\` | \`$PROCESSES\` | \`$FILE_ACCESS\` |" >> $GITHUB_STEP_SUMMARY
            fi
          done




        
